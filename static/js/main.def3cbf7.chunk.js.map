{"version":3,"sources":["google-10000-english-usa-no-swears-medium.txt","google-10000-english-usa-no-swears-long.txt","google-10000-english-usa-no-swears-short.txt","de-top-500.txt","App.js","index.js"],"names":["VOICES","en","de","TTS","CognitoIdentityClient","require","fromCognitoIdentityPool","Polly","paginateListSpeechSynthesisTasks","this","client","region","credentials","identityPoolId","speechParams","OutputFormat","SampleRate","Text","TextType","VoiceId","console","log","voice","language","text","newURLHandler","getSynthesizeSpeechUrl","params","url","LISTS","Short","WL_en_short","Medium","WL_en_medium","Long","WL_en_long","WL_de_top500","WordGenerator","words","list","callWhenReady","fetch","then","response","data","split","catch","error","alert","Object","keys","Math","floor","random","length","useStyles","makeStyles","theme","root","flexGrow","width","align","paper","padding","spacing","textAlign","color","palette","secondary","formControl","margin","minWidth","selectEmpty","marginTop","App","classes","React","useState","wordList","generator","tts","settings","setSettings","load","word","setWord","userInput","setUserInput","Alert","severity","feedback","setFeedback","setURL","Audio","audio","speakWord","newWord","speakText","newURL","autoplay","src","nextWord","handleSubmit","event","preventDefault","trim","toLocaleUpperCase","localeCompare","toUpperCase","setTimeout","play","changeVoice","setVoice","changeList","className","Grid","container","item","xs","FormControl","InputLabel","id","Select","labelId","value","onChange","target","getLists","getVoices","MenuItem","map","Button","variant","onClick","disabled","fullWidth","hint","forEach","letter","TextField","onInput","onKeyDown","e","key","type","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.def3cbf7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/google-10000-english-usa-no-swears-medium.ed99d00a.txt\";","export default __webpack_public_path__ + \"static/media/google-10000-english-usa-no-swears-long.64e0047a.txt\";","export default __webpack_public_path__ + \"static/media/google-10000-english-usa-no-swears-short.f7ab0961.txt\";","export default __webpack_public_path__ + \"static/media/de-top-500.092bf686.txt\";","import WL_en_medium from \"./google-10000-english-usa-no-swears-medium.txt\";\nimport WL_en_long from \"./google-10000-english-usa-no-swears-long.txt\";\nimport WL_en_short from \"./google-10000-english-usa-no-swears-short.txt\";\nimport WL_de_top500 from \"./de-top-500.txt\";\n\nimport \"./App.css\";\n\nimport React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst VOICES = {\n  en: [\n    \"Ivy\",\n    \"Joanna\",\n    \"Kendra\",\n    \"Kimberly\",\n    \"Salli\",\n    \"Joey\",\n    \"Justin\",\n    \"Kevin\",\n    \"Matthew\",\n  ],\n  de: [\"Marlene\", \"Vicki\", \"Hans\"],\n};\n\nexport class TTS {\n  constructor() {\n    const {\n      CognitoIdentityClient,\n    } = require(\"@aws-sdk/client-cognito-identity\");\n    const {\n      fromCognitoIdentityPool,\n    } = require(\"@aws-sdk/credential-provider-cognito-identity\");\n    const {\n      Polly,\n      paginateListSpeechSynthesisTasks,\n    } = require(\"@aws-sdk/client-polly\");\n\n    // Create the Polly service client, assigning your credentials\n    this.client = new Polly({\n      region: \"us-west-1\",\n      credentials: fromCognitoIdentityPool({\n        client: new CognitoIdentityClient({ region: \"us-west-1\" }),\n        identityPoolId: \"us-west-1:6efc86a3-4fda-40f5-80a5-427cb0a1457a\", // IDENTITY_POOL_ID\n      }),\n    });\n\n    // Set the parameters\n    this.speechParams = {\n      OutputFormat: \"mp3\", // For example, 'mp3'\n      SampleRate: \"16000\", // For example, '16000\n      Text: \"hello world\", // The 'speakText' function supplies this value\n      TextType: \"ssml\", // For example, \"text\"\n      VoiceId: \"Matthew\", // For example, \"Matthew\"\n    };\n    console.log(\"TTS constructed\");\n  }\n\n  setVoice(voice) {\n    this.speechParams.VoiceId = voice;\n  }\n\n  getVoices(language) {\n    // todo replace with this.client.describeVoices() call,\n    return VOICES[language];\n  }\n\n  async speakText(text, newURLHandler) {\n    console.log(\"speaking: \" + text);\n    this.speechParams.Text =\n      '<speak><prosody rate=\"slow\">' + text + \"</prosody></speak>\";\n    const {\n      getSynthesizeSpeechUrl,\n    } = require(\"@aws-sdk/polly-request-presigner\");\n    let client = this.client;\n    try {\n      let url = await getSynthesizeSpeechUrl({\n        client,\n        params: this.speechParams,\n      });\n      console.log(url);\n      newURLHandler(url);\n    } catch (err) {\n      console.log(\"Error\", err);\n    }\n  }\n}\n\n//-------------\n\nvar LISTS = {\n  en: {\n    Short: WL_en_short,\n    Medium: WL_en_medium,\n    Long: WL_en_long,\n  },\n  de: {\n    \"Top 500\": WL_de_top500,\n  },\n};\n\nexport class WordGenerator {\n  constructor() {\n    console.log(\"word generator constructor\");\n    this.words = [];\n  }\n\n  load(language, list, callWhenReady) {\n    console.log(\"word generator loading list started\");\n\n    fetch(LISTS[language][list])\n      .then((response) => response.text())\n      .then((data) => {\n        this.words = data.split(\"\\n\");\n        console.log(\"word generator done loading list\");\n        callWhenReady();\n      })\n      .catch((error) => {\n        console.error(\n          \"There has been a problem with your fetch operation:\",\n          error\n        );\n        alert(\"Could not load word list, sorry!\");\n      });\n  }\n\n  getLists(language) {\n    //alert(LISTS[language]);\n    return Object.keys(LISTS[language]);\n  }\n\n  nextWord() {\n    //console.log(this.words);\n    //console.log(this.words.length);\n    return this.words[Math.floor(Math.random() * this.words.length)];\n  }\n}\n\n//---------\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    width: 500,\n    align: \"center\",\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\n// -----------\n\nfunction App() {\n  const classes = useStyles();\n  const [settings, setSettings] = React.useState(() => {\n    return {\n      language: \"en\",\n      wordList: \"Medium\",\n      voice: \"Matthew\",\n      generator: new WordGenerator(),\n      tts: new TTS(),\n    };\n  });\n  settings.generator.load(settings.language, settings.wordList, () => {});\n  const [word, setWord] = React.useState(\"\");\n  const [userInput, setUserInput] = React.useState(\"\");\n  const [feedback, setFeedback] = React.useState(\n    <Alert severity=\"info\">Click New Word to start!</Alert>\n  );\n\n  const handleNewWordClick = () => {\n    setFeedback(\n      <Alert severity=\"warning\">\n        You have given up. Let's try a new word...\n      </Alert>\n    );\n    setTimeout(\n      () => setFeedback(<Alert severity=\"info\">Guess the new word</Alert>),\n      800\n    );\n    nextWord();\n  };\n\n  const [url, setURL] = useState(\"\");\n  const [audio, setAudio] = useState(() => {\n    console.log(\"New HTML Audio object created\");\n    return new Audio(url);\n  });\n\n  const speakWord = (newWord = word) => {\n    settings.tts.speakText(newWord, (newURL) => {\n      setURL(newURL);\n      console.log(\"new URL received\");\n      audio.autoplay = true;\n      audio.src = newURL;\n    });\n  };\n\n  const nextWord = () => {\n    const newWord = settings.generator.nextWord();\n    speakWord(newWord);\n    setUserInput(\"\");\n    setWord(newWord);\n  };\n\n  const handleUserInput = ({ target }) => {\n    setUserInput(target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (userInput === \"\") {\n      return;\n    }\n    console.log(\"submit: \" + userInput);\n    if (\n      userInput.trim().toLocaleUpperCase().localeCompare(word.toUpperCase()) ===\n      0\n    ) {\n      setFeedback(<Alert severity=\"info\">Correct! The word is {word}.</Alert>);\n      setTimeout(nextWord(), 200);\n      setTimeout(\n        () => setFeedback(<Alert severity=\"info\">Guess the new word</Alert>),\n        1000\n      );\n    } else {\n      setFeedback(<Alert severity=\"info\">Wrong, try again...</Alert>);\n      audio.play();\n    }\n  };\n\n  const handleVoiceChange = ({ target }) => {\n    changeVoice(target.value);\n    speakWord();\n  };\n\n  const changeVoice = (voice) => {\n    console.log(\"voice changed to \" + voice);\n    settings.tts.setVoice(voice);\n    setSettings({ ...settings, voice: voice });\n  };\n\n  const handleHintClick = () => {\n    let hint = \"\";\n    [...word].forEach((letter) => {\n      if (Math.random() < 0.5) {\n        hint += \"_\";\n      } else {\n        hint += letter;\n      }\n    });\n    setFeedback(\n      <Alert severity=\"error\">Here are some letters: \"{hint}\"</Alert>\n    );\n  };\n\n  const handleWordListChange = ({ target }) => {\n    changeList(target.value);\n  };\n\n  const changeList = (list) => {\n    console.log(\"List changed to \" + list);\n    setFeedback(\n      <Alert severity=\"info\">Let me load new word list, one second...</Alert>\n    );\n    settings.generator.load(settings.language, list, () => {\n      setFeedback(<Alert severity=\"info\">Finished loading new words</Alert>);\n      setTimeout(() => setFeedback(\"\"), 500);\n    });\n    setSettings({ ...settings, wordList: list });\n    nextWord();\n  };\n\n  const handleLanguageChange = ({ target }) => {\n    console.log(\"language changed to \" + target.value);\n    const list = settings.generator.getLists(target.value)[0];\n    changeList(list);\n    const voice = settings.tts.getVoices(target.value)[0];\n    changeVoice(voice);\n    setSettings({\n      ...settings,\n      voice: voice,\n      language: target.value,\n      wordList: list,\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <Grid container spacing={1} className={classes.root}>\n        <Grid item xs={4}>\n          <FormControl className={classes.formControl}>\n            <InputLabel id=\"language\">Language</InputLabel>\n            <Select\n              labelId=\"language\"\n              id=\"language-select\"\n              value={settings.language}\n              onChange={handleLanguageChange}\n            >\n              <MenuItem value=\"en\">English</MenuItem>\n              <MenuItem value=\"de\">German</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n\n        <Grid item xs={4}>\n          <FormControl className={classes.formControl}>\n            <InputLabel id=\"word-list\">Word List</InputLabel>\n            <Select\n              labelId=\"word-list\"\n              id=\"word-list-select\"\n              value={settings.wordList}\n              onChange={handleWordListChange}\n            >\n              {settings.generator.getLists(settings.language).map((list) => (\n                <MenuItem value={list}>{list}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </Grid>\n\n        <Grid item xs={4}>\n          <FormControl className={classes.formControl}>\n            <InputLabel id=\"voice\">Voice</InputLabel>\n            <Select\n              labelId=\"voice\"\n              id=\"voice-select\"\n              value={settings.voice}\n              onChange={handleVoiceChange}\n            >\n              {settings.tts.getVoices(settings.language).map((voice) => (\n                <MenuItem value={voice}>{voice}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </Grid>\n\n        <Grid item xs={4}>\n          <div>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => {\n                audio.play();\n              }}\n              disabled={url === \"\" ? true : false}\n              fullWidth\n            >\n              Say Again\n            </Button>\n          </div>\n        </Grid>\n\n        <Grid item xs={4}>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={handleHintClick}\n            fullWidth\n            disabled={word === \"\" ? true : false}\n          >\n            Hint\n          </Button>\n        </Grid>\n\n        <Grid item xs={4}>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={handleNewWordClick}\n            fullWidth\n          >\n            New Word\n          </Button>\n        </Grid>\n\n        <Grid item xs={8}>\n          <TextField\n            id=\"word-input\"\n            value={userInput}\n            onInput={handleUserInput}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                //(e.keyCode === 13) {\n                handleSubmit(e);\n              }\n            }}\n            id=\"standard-basic\"\n            label=\"Spell the word\"\n            size=\"large\"\n            fullWidth\n          />\n        </Grid>\n        <Grid item xs={4}>\n          <Button\n            type=\"submit\"\n            color=\"primary\"\n            onClick={handleSubmit}\n            fullWidth\n          >\n            Submit\n          </Button>\n        </Grid>\n\n        <Grid item xs={12}>\n          {feedback}\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}